/*
  ・連続して実行される一本の処理の流れを「スレッド」という。
  ・「メインスレッド」は、JavaScriptの実行とレンダリング (画面描写処理) を行う。
  ・1秒間あたりの画面 (フレーム) 更新頻度を「FPS」という。
  ・重い処理がある (FPS以上に時間が掛かる) と画面が更新されなくなる。
  ・「同期処理」では「メインスレッド」でコードが順番に実行される。
  ・「同期処理」では一つの処理が完了するまで次の処理に進まない。
  ・「非同期処理」は、一時的に「メインスレッド」から切り離される。
  ・「非同期処理」は、切り離されることによって一時的に「メインスレッド」に空きが出る。
*/

//  引数にはミリ秒が渡される。
function sleep(ms) {
  //  sleep関数が実行された際に1度だけ実行され、実行された時刻が「startTime」に格納されている。
  const startTime = new Date();
  // 「new Date()」は、while文の条件が「false」になる限り実行され続ける。
  //  実行毎に時間は経つため「startTime」よりも遅い時刻が取得される。
  while (new Date() - startTime < ms);
  console.log('sleep done');
}

const btn = document.querySelector('button');
btn.addEventListener('click', function () {
  console.log('button clicked');
});

//  ①sleep関数が3秒間「メインスレッド」を占有する。
//  ②他の処理の実行が可能になる。
// sleep(3000);

//  ①2秒間、他の処理の実行が可能になる。
//  ②sleep関数が3秒間「メインスレッド」を占有する。
//  ③他の処理の実行が可能になる。
//  第1引数のコールバック関数が「非同期処理」として「メインスレッド」から切り離され、一時的に「メインスレッド」に空きが出る。
//  第2引数のミリ秒後「非同期処理」が実行される。
window.setTimeout(function () {
  sleep(3000);
}, 2000);
