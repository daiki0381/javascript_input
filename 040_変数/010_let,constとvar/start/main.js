/*
  let
  ・再宣言 ▶︎ エラー
  ・再代入 ▶︎ 可能
  ・スコープ ▶︎ ブロック
  ・ホイスティング (初期化) ▶︎ エラー

  const
  ・再宣言 ▶︎ エラー
  ・再代入 ▶︎ エラー
  ・スコープ ▶︎ ブロック
  ・ホイスティング (初期化) ▶︎ エラー

  var
  ・再宣言 ▶︎ 可能
  ・再代入 ▶︎ 可能
  ・スコープ ▶︎ 関数
  ・ホイスティング (初期化) ▶︎ undefined
*/

// let
let a = 0;
let a = 1; // 再宣言できないためエラーになる。

let b = 0;
b = 1; // 再代入可能。

{
  let c = 0; // ブロックスコープが有効になる。
}
console.log(c); // ブロックスコープ外のためエラーになる。

console.log(d); // 初期化できないためエラーになる。
let d = 0;

// const
const e = 0;
const e = 1; // 再宣言できないためエラーになる。

const f = 0;
f = 1; // 再代入できないためエラーになる。

{
  const g = 0; // ブロックスコープが有効になる。
}
console.log(g); // ブロックスコープ外のためエラーになる。

console.log(h); // 初期化できないためエラーになる。
const h = 0;

// var
var i = 0;
var i = 1; // 再宣言可能。

var j = 0;
j = 1; // 再代入可能。

{
  var k = 0; // ブロックスコープが無効になる。
}
console.log(k); // ブロックスコープが無効になるため表示される。

console.log(l); // 初期化されるため「undefined」が表示される。
var l = 0;
