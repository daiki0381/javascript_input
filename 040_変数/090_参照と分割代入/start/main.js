/*
  ・左辺のオブジェクトの変数に右辺のオブジェクトのプロパティ値を代入することを「分割代入」という。
  ・左辺のオブジェクトの変数に格納される値が「プリミティブ型」の場合、「参照先の値」がコピーされる。
  ・左辺のオブジェクトの変数に格納される値が「オブジェクト」の場合、「オブジェクトへの参照」がコピーされる。
*/

// プリミティブ型

const a = {
  prop: 0,
};

let { b } = a;
console.log(b); // 左辺の変数名と右辺のプロパティ名は一致させる必要があるので「undefined」が表示される。

let { prop } = a;
//  参照先の値がコピーされるため変数aと変数propは独立している。
prop = 1;
console.log(prop, a); // 変数propの値のみ変更されるため「1 0」と表示される。

//  実引数のオブジェクトのプロパティ値が仮引数の分割代入の変数に格納される。
function fn({ prop }) {
  //  参照先の値がコピーされるため変数aと変数propは独立している。
  prop = 1;
  console.log(prop, a); // 変数propの値のみ変更されるため「1 0」と表示される。
}

fn(a);

// オブジェクト

const c = {
  prop1: {
    prop2: 0,
  },
};

let { prop1 } = c;
//  オブジェクトへの参照がコピーされるため変数cと変数prop1のオブジェクトの実体は同じである。
prop1.prop2 = 1;
console.log(prop1, c); // 変数prop1のプロパティ値を変更すると、変数cと変数prop1のオブジェクトの実体は同じであるため「{prop2: 1} {prop2: 1}」と表示される。
